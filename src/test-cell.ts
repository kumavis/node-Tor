import { parseRelayCellPayload, readCellsFromData } from "./messaging"
import { bufferFromUint } from "./util"

const h = (s: string) => Buffer.from(s, 'hex')

// Circ ID: 0, Command: 9, Payload: 0200000001408d14f9008147455420687474703a2f2f7777772e7265646469742e636f6d2f20485454502f312e310d0a486f73743a207777772e7265646469742e636f6d0d0a557365722d4167656e743a206375726c2f372e38312e300d0a4163636570743a202a2f2a0d0a50726f78792d436f6e6e656374696f6e3a204b6565702d416c6976650d0a0d0a
// const relayPayload = h('b87f92190902000000014500e101008147455420687474703a2f2f7777772e7265646469742e636f6d2f20485454502f312e310d0a486f73743a207777772e7265646469742e636f6d0d0a557365722d4167656e743a206375726c2f372e38312e300d0a4163636570743a202a2f2a0d0a50726f78792d436f6e6e656374696f6e3a204b6565702d416c6976650d0a0d0a

// const cellPayload = Buffer.concat([
//   h('00000000'),
//   h('09'),
//   // bufferFromUint(2, relayPayload.length),
//   relayPayload,
// ])
const cellPayload = h('a08f898c09020000000100000000008147455420687474703a2f2f7777772e7265646469742e636f6d2f20485454502f312e310d0a486f73743a207777772e7265646469742e636f6d0d0a557365722d4167656e743a206375726c2f372e38312e300d0a4163636570743a202a2f2a0d0a50726f78792d436f6e6e656374696f6e3a204b6565702d416c6976650d0a0d0a

for (const cell of readCellsFromData(cellPayload, () => 5)) {
  console.log(cell)
  console.log(parseRelayCellPayload(cell.data))
}


// 02000000
// 011169506a008147455420687474703a2f2f7777772e7265646469742e636f6d2f20485454502f312e310d0a486f73743a207777772e7265646469742e636f6d0d0a557365722d4167656e743a206375726c2f372e38312e300d0a4163636570743a202a2f2a0d0a50726f78792d436f6e6e656374696f6e3a204b6565702d416c6976650d0a0d0a
